#################################
#
# snakefile for converting CIDR Sequencing data deliveries to non-PII ready for GRIS upload, running QC, and joint genotyping
#
# Susan Huse, susan.huse@nih.gov
# Frederick National Lab
# April 10, 2019
#
# Justin Lack
# Frederick National Lab
# December 11, 2019
#
#################################

## 
## Load python modules
##
import os
from os import listdir
from os.path import join
import pandas as pd
import re
import sys
from glob import glob
import datetime

##
## Set initial global variables
##
dir_renamed = os.getcwd()
dir_rawdata = join(dir_renamed, "rawdata")
dir_hla_master = "/sysapps/cluster/software/HLA-LA/1.0/HLA-LA-master"

seqfile = ".bam"

##
## Read in the masterkey file 
##
df = pd.read_csv("masterkey.txt", header=0, sep='\t')
dict_CIDR = dict(zip(df['IDs'].tolist(), df['Names'].tolist()))
print(dict_CIDR)

configfile:"NCBR_wgs_pipeline/ncbr_wgs_references.json"
chroms = ["1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","X","Y","MT"]

##
## Set rule all
##
rule all:
    input:
        fastqc=expand(join("BATCH_QC/FastQC/{newID}.recal_fastqc.html"),newID=list(dict_CIDR.keys())),
        flagstats=expand(join("BATCH_QC/Flagstats/{newID}.flagstats"),newID=list(dict_CIDR.keys())),
        qualimap=expand(join("BATCH_QC/{newID}", "qualimapReport.html"),newID=list(dict_CIDR.keys())),
        vcftools = join("BATCH_QC/", batch_name + ".het"),
        collectvarintcallmetrics = join("BATCH_QC/", batch_name + ".variant_calling_detail_metrics"),
        varianteval=expand(join("BATCH_QC/VariantEval/{newID}"),newID=list(dict_CIDR.keys())),
        snpeff= expand(join("BATCH_QC/SNPeff/{newID}/{newID}"),newID=list(dict_CIDR.keys())),
        bcftools=expand(join("BATCH_QC/BCFStats/{newID}"),newID=list(dict_CIDR.keys())),
        multiqc=join("BATCH_QC/QC_Report.html"),
        plota = join(dir_renamed, "inbreeding", "Heterozygous_to_Homozygous_Ratio_mqc.png"),
        plotb = join(dir_renamed, "inbreeding", "Mean_Homozygous_Tract_Length_mqc.png"),

rule fastqc_trimmed:
    input:  "BAM/{newID}.final.bam"
    output: "BATCH_QC/FastQC/{newID}.final_fastqc.html"
    params: adapters=config['references']['fastqc_adapters'],rname="pl:fastqc"
    threads: 4
    shell: """
           mkdir -p BATCH_QC/FastQC
           module load fastqc
           fastqc -o BATCH_QC/FastQC -f bam --threads {threads} --contaminants {params.adapters} {input}
           """

rule qualimap:
    input: "BAM/{newID}.final.bam",
    output: txt = join("BATCH_QC/{newID}","genome_results.txt"), html = join("BATCH_QC/{newID}", "qualimapReport.html")
    threads: 24
    params: dir = "BATCH_QC/{newID}", exons=config['references']['EXONS'], rname="qualimap"
    shell: "module load qualimap;unset DISPLAY; qualimap bamqc -bam {input} --java-mem-size=64G -c gd hg19 -ip -outdir {params.dir} -outformat HTML -nt {threads} -gff {params.exons} --skip-duplicated -nw 500 -p NON-STRAND-SPECIFIC"

rule samtools_flagstats:
    input:bam= "BAM/{newID}.final.bam",
    output:join("BATCH_QC/Flagstats/{newID}.flagstats")
    params: rname="flagstats"
    shell: "module load samtools; samtools flagstat {input} > {output}"

rule vcftools:
    input: vcf = "VCF/WGS_" + batch_name + ".GTfix.vcf.gz",
    output: join("BATCH_QC/", batch_name + ".het"),
    params: batch=batch_name,rname="vcftools"
    shell: "module load vcftools/0.1.16; vcftools --gzvcf {input.vcf} --het --out BATCH_QC/{params.batch}"

rule collectvariantcallmetrics:
    input: vcf = "VCF/WGS_" + batch_name + ".GTfix.vcf.gz",
    output: join("BATCH_QC/", batch_name + ".variant_calling_detail_metrics")
    params: vcf=config['references']['DBSNP'],batch=batch_name,rname="varcallmetrics"
    shell: "module load picard/2.20.8; java -Xmx24g -jar $PICARDJARPATH/picard.jar CollectVariantCallingMetrics INPUT={input.vcf} OUTPUT=BATCH_QC/{params.batch} DBSNP={params.vcf} Validation_Stringency=SILENT"

rule Gatk_SelectVariants:
	input: vcf = "VCF/WGS_" + batch_name + ".GTfix.vcf.gz",
	output: temp(join("BATCH_QC/{newID}.vcf.gz"))
	params: genome=config['references']['GENOME'], Sname = "{newID}", rname="varselect"
	shell:"module load GATK/3.8-1; GATK -m 12g SelectVariants -R {params.genome} -o {output} -V {input.vcf} --sample_name {params.Sname} --ALLOW_NONOVERLAPPING_COMMAND_LINE_SAMPLES --excludeNonVariants"

rule bcftools:
	input: "BATCH_QC/{newID}.vcf.gz"
  	output: join("BATCH_QC/BCFStats/{newID}")
  	params: rname="bcfstats"
  	shell: "module load bcftools/1.9; bcftools stats {input} > {output}"

rule varianteval:
	input: "BATCH_QC/{newID}.vcf.gz"
	output: join("BATCH_QC/VariantEval/{newID}")
	params:genome=config['references']['GENOME'],vcf=config['references']['DBSNP'], rname="vareval"
	threads: 16
	shell:"module load GATK/3.8-1; GATK -m 12g VariantEval -R {params.genome} -o {output} --dbsnp {params.vcf} --eval {input} -nt {threads}"

rule snpeff:
	input:  "BATCH_QC/{newID}.vcf.gz"
	output: vcf= join("BATCH_QC/SNPeff/{newID}/{newID}_exome.vcf"),
	        csv = join("BATCH_QC/SNPeff/{newID}/{newID}"),
	        html = join("BATCH_QC/SNPeff/{newID}/{newID}.html")
	params: genome=config['references']['SNPEFF_GENOME'],effconfig=config['references']['SNPEFF_CONFIG'], rname="snpeff"
	shell: "module load snpEff/4.3t; java -Xmx12g -jar $SNPEFF_JAR -v -canon -c {params.effconfig} -csvstats {output.csv} -stats {output.html} {params.genome} {input} > {output.vcf}"

rule multiqc:
    input: expand(join("BATCH_QC/FastQC/{newID}.recal_fastqc.html"),newID=list(dict_CIDR.keys())),
           expand(join("BATCH_QC/Flagstats/{newID}.flagstats"),newID=list(dict_CIDR.keys())),
           expand(join("BATCH_QC/{newID}", "qualimapReport.html"),newID=list(dict_CIDR.keys())),
           expand(join("BATCH_QC/VariantEval/{newID}"),newID=list(dict_CIDR.keys())),
           expand(join("BATCH_QC/SNPeff/{newID}/{newID}"),newID=list(dict_CIDR.keys())),
           expand(join("BATCH_QC/BCFStats/{newID}"),newID=list(dict_CIDR.keys())),
           expand(join("BATCH_QC/{newID}","genome_results.txt"),newID=list(dict_CIDR.keys())),
           join("BATCH_QC/", batch_name + ".het"),
           join("BATCH_QC/", batch_name + ".variant_calling_detail_metrics"),
           join(dir_renamed, "inbreeding", "Heterozygous_to_Homozygous_Ratio_mqc.png"),
           join(dir_renamed, "inbreeding", "Mean_Homozygous_Tract_Length_mqc.png"),
           "VCF/" + batch_name + "_peddy.html",
           "VCF/through_" + batch_name + "_peddy.html",
    output: "BATCH_QC/QC_Report.html"
    params: patterns=config['references']['PATTERNS'], rname="multiqc"
    shell: "module load multiqc/1.8; multiqc --interactive -c {params.patterns} -f -n {output} --interactive ."

### Here's where the batch processing rules start

###
### Estimate ethnic admixture
###
rule admixture:
    input: 
        vcf = "VCF/WGS_" + batch_name + ".vcf.gz",
    output: 
        filtvcf = temp(join(dir_renamed, "BATCH_QC", "admixture", "filtered.recode.vcf")),
        mergedvcf = temp(join(dir_renamed, "BATCH_QC", "admixture", "merged.knowns.vcf")),
        admixtable = join(dir_renamed, "BATCH_QC", "admixture", "admixture_table.tsv"),
    params: 
        batch = batch_name, 
        rname = "admixture",
        knowns = config['references']['KNOWNANCESTRY'],
        genome = config['references']['GENOME'],
    shell: 
           """
           mkdir -p BATCH_QC/admixture
           module load vcftools/0.1.16
           vcftools --gzvcf {input.vcf} --remove-indels --max-missing 1 --recode --recode-INFO-all --out BATCH_QC/admixture/filtered
           module purge
           module load GATK/3.8-1
           GATK -m 12g CombineVariants -R {params.genome} --genotypemergeoption UNSORTED -o {output.mergedvcf} --variant {output.filtvcf} --variant {params.knowns} --minimumN 2 -nt 4
           module purge
           module load plink/1.9.0-beta4.4
           plink --noweb --recode12 --snps-only --maf 0.05 --out BATCH_QC/admixture/merged.filtered.knowns --vcf {output.mergedvcf}
           perl /data/NCBR/projects/csi_test_batch/resources/software/admixture_prep.pl /data/GRIS_NCBR/resources/1k_genomes_superpop_key.txt BATCH_QC/admixture/merged.filtered.knowns.pop BATCH_QC/admixture/merged.filtered.knowns.ped
           /data/CCBR_Pipeliner/db/PipeDB/bin/admixture_linux-1.3.0/admixture BATCH_QC/admixture/merged.filtered.knowns.ped 5 --supervised -j4
           mv merged.filtered.knowns.5.P BATCH_QC/admixture/merged.filtered.knowns.5.P
           mv merged.filtered.knowns.5.Q BATCH_QC/admixture/merged.filtered.knowns.5.Q
           perl /data/NCBR/projects/csi_test_batch/resources/software/admixture_post.pl /data/GRIS_NCBR/resources/1k_genomes_superpop_key.txt {output.admixtable} BATCH_QC/admixture/merged.filtered.knowns.5.Q hg19 BATCH_QC/admixture/merged.filtered.knowns.ped
           """

###
### Plot ethnic admixture
###
rule admixplot:
    input: admixtable = join(dir_renamed, "BATCH_QC", "admixture", "admixture_table.tsv"),
    output: admix_plot = join(dir_renamed, "BATCH_QC", "admixture", "admixture_mqc.png"),
    params: rname = "admixplot"
    shell: 
        """
        module load R; Rscript /data/GRIS_NCBR/resources/software/admixplot.R
        """

###
### Identify inbreeding outliers
###
rule inbreeding:
    input: 
        vcf = "VCF/WGS_" + batch_name + ".vcf.gz",
    output: 
        knownsvcf = temp(join(dir_renamed, "inbreeding", "known.sites.vcf.gz")),
        plota = join(dir_renamed, "inbreeding", "Heterozygous_to_Homozygous_Ratio_mqc.png"),
        plotb = join(dir_renamed, "inbreeding", "Mean_Homozygous_Tract_Length_mqc.png"),
    params: 
        batch = batch_name, 
        rname = "inbreeding",
        knowns = config['references']['KNOWNANCESTRY'],
        genome = config['references']['GENOME'],
        vcf=config['references']['DBSNP'],
    shell: 
           """
           module load GATK/3.8-1
           mkdir -p inbreeding
           GATK -m 12g SelectVariants -R {params.genome} --maxNOCALLfraction 0 --selectTypeToInclude SNP --restrictAllelesTo BIALLELIC -V {input.vcf} -o {output.knownsvcf} --concordance {params.knowns}
           module purge
           module load picard/2.20.8
           java -Xmx24g -jar $PICARDJARPATH/picard.jar CollectVariantCallingMetrics INPUT={output.knownsvcf} OUTPUT=inbreeding/picardMetrics DBSNP={params.vcf} THREAD_COUNT=8 Validation_Stringency=SILENT
           module purge
           module load plink/1.9.0-beta4.4
           plink --noweb --recode12 --snps-only --out inbreeding/filtered.known.sites --vcf {output.knownsvcf}
           module purge
           module load plink/1.07
           plink --file inbreeding/filtered.known.sites --noweb --homozyg --out inbreeding/ROH
           module purge
           module load R/3.6
           Rscript /data/GRIS_NCBR/resources/software/inbreedingPlot.R
           """

rule peddy:
    input:
        vcf = "VCF/WGS_" + batch_name + ".GTfix.vcf.gz",
        vcfall = "VCF/snps_and_indels_recal_refinement_variants.GTfix.vcf.gz",
    output:
        html = "VCF/" + batch_name + "_peddy.html",
        htmlall = "VCF/through_" + batch_name + "_peddy.html",
        peda = temp("VCF/batch.ped"),
        pedb = temp("VCF/cumulative.ped"),
    params:
        rname = "VCF_rename",
        batch = batch_name,
    shell:
        """
        module load vcftools/0.1.16
        vcftools --gzvcf {input.vcf} --plink --out VCF/batch --chr 22
        vcftools --gzvcf {input.vcfall} --plink --out VCF/cumulative --chr 22
        cut -f1,2,3,4,5,6 VCF/batch.ped > VCF/batch_alt.ped
        cut -f1,2,3,4,5,6 VCF/cumulative.ped > VCF/cumulative_alt.ped
        module load peddy/0.3.1
        peddy -p 2 --prefix VCF/{params.batch}_peddy {input.vcf} VCF/batch_alt.ped
        peddy -p 2 --prefix VCF/through_{params.batch}_peddy {input.vcf} VCF/cumulative_alt.ped
        """